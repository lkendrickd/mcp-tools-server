name: Create Release with Linux Binary

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Manual trigger
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0). Leave empty to use version file.'
        required: false
        type: string
      tag_name:
        description: 'Git tag name (e.g., v1.0.0). Will be created if it does not exist.'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required to create releases, upload assets, and create tags
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'  # Updated to match Dockerfile version
        
    - name: Install Make
      run: |
        sudo apt-get update
        sudo apt-get install -y make
        
    - name: Get version and tag information
      id: version
      run: |
        # Determine if this is a manual or automatic trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual trigger detected"
          
          # Use provided version or fall back to version file
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual input version: $VERSION"
          elif [ -f "version" ]; then
            VERSION=$(cat version | tr -d '\n')
            echo "Using version from file: $VERSION"
          else
            echo "Error: No version provided and no version file found"
            exit 1
          fi
          
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Using manual tag name: $TAG_NAME"
          
          # Create tag if it doesn't exist
          if ! git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Creating new tag: $TAG_NAME"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG_NAME" -m "Release $VERSION"
            git push origin "$TAG_NAME"
          else
            echo "Tag $TAG_NAME already exists"
          fi
          
        else
          echo "Automatic trigger (tag push) detected"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Use version from file if available, otherwise use tag
          if [ -f "version" ]; then
            VERSION=$(cat version | tr -d '\n')
            echo "Using version from file: $VERSION"
          else
            VERSION=$TAG_NAME
            echo "Using version from tag: $VERSION"
          fi
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"
        echo "Final tag: $TAG_NAME"
        
    - name: Run tests
      run: make test
      
    - name: Build Linux binary using Make
      run: |
        # Use make build which handles LDFLAGS and version injection
        make build
        
        # Copy and rename the binary for release
        cp build/server mcp-tools-server-linux-amd64
      
    - name: Make binary executable
      run: chmod +x mcp-tools-server-linux-amd64
      
    - name: Create checksum
      run: |
        sha256sum mcp-tools-server-linux-amd64 > mcp-tools-server-linux-amd64.sha256
        
    - name: Get build information
      id: build_info
      run: |
        # Get build info from the binary
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=$(git rev-parse --short HEAD)
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.TAG_NAME }}
        name: MCP Tools Server ${{ steps.version.outputs.VERSION }}
        body: |
          # MCP Tools Server v${{ steps.version.outputs.VERSION }}
          
          A Go-based Model Context Protocol (MCP) server that provides simple tools for AI assistants.
          
          ## Features
          - UUID Generation Tool
          - Dual Protocol Support (MCP stdio + HTTP REST API)
          - Graceful Shutdown & Concurrent Requests
          - Tiny Footprint (5.8MB binary)
          
          ## Download
          - [Linux Binary (x64)](../../releases/download/${{ steps.version.outputs.TAG_NAME }}/mcp-tools-server-linux-amd64)
          
          ## Checksums
          ```
          SHA256: $(cat mcp-tools-server-linux-amd64.sha256 | cut -d' ' -f1)
          ```
          
          ## Usage
          ```bash
          # Download and run
          chmod +x mcp-tools-server-linux-amd64
          ./mcp-tools-server-linux-amd64 --version
          
          # Run both MCP and HTTP servers (default)
          ./mcp-tools-server-linux-amd64
          
          # Run only HTTP server
          ./mcp-tools-server-linux-amd64 --http
          
          # Run only MCP server
          ./mcp-tools-server-linux-amd64 --mcp
          ```
          
          ## Build Info
          - **Version:** ${{ steps.version.outputs.VERSION }}
          - **Build Time:** ${{ steps.build_info.outputs.BUILD_TIME }}
          - **Git Commit:** ${{ steps.build_info.outputs.GIT_COMMIT }}
          - **Trigger:** ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (Tag Push)' }}
        files: |
          mcp-tools-server-linux-amd64
          mcp-tools-server-linux-amd64.sha256
        draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft == 'true' || false }}
        prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease == 'true' || false }}
        fail_on_unmatched_files: true
        
    - name: Release Summary
      run: |
        echo "Release completed successfully!"
        echo "Release Details:"
        echo "   • Version: ${{ steps.version.outputs.VERSION }}"
        echo "   • Tag: ${{ steps.version.outputs.TAG_NAME }}"
        echo "   • Trigger: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (Tag Push)' }}"
        echo "   • Draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft || 'false' }}"
        echo "   • Pre-release: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || 'false' }}"