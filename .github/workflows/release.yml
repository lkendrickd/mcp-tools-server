name: Create Release with Linux Binary

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required to create releases and upload assets
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'  # Updated to match Dockerfile version
        
    - name: Install Make
      run: |
        sudo apt-get update
        sudo apt-get install -y make
        
    - name: Get version from file
      id: version
      run: |
        if [ -f "version" ]; then
          VERSION=$(cat version | tr -d '\n')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from file: $VERSION"
        else
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from tag: $VERSION"
        fi
        
    - name: Run tests
      run: make test
      
    - name: Build Linux binary using Make
      run: |
        # Use make build which handles LDFLAGS and version injection
        make build
        
        # Copy and rename the binary for release
        cp build/server mcp-tools-server-linux-amd64
      
    - name: Make binary executable
      run: chmod +x mcp-tools-server-linux-amd64
      
    - name: Create checksum
      run: |
        sha256sum mcp-tools-server-linux-amd64 > mcp-tools-server-linux-amd64.sha256
        
    - name: Get build information
      id: build_info
      run: |
        # Get build info from the binary
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=$(git rev-parse --short HEAD)
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: MCP Tools Server ${{ steps.version.outputs.VERSION }}
        body: |
          # MCP Tools Server v${{ steps.version.outputs.VERSION }}
          
          A Go-based Model Context Protocol (MCP) server that provides simple tools for AI assistants.
          
          ## ðŸš€ Features
          - UUID Generation Tool
          - Dual Protocol Support (MCP stdio + HTTP REST API)
          - Graceful Shutdown & Concurrent Requests
          - Tiny Footprint (5.8MB binary)
          
          ## ðŸ“¦ Download
          - [Linux Binary (x64)](../../releases/download/${{ github.ref_name }}/mcp-tools-server-linux-amd64)
          
          ## ðŸ”’ Checksums
          ```
          SHA256: $(cat mcp-tools-server-linux-amd64.sha256 | cut -d' ' -f1)
          ```
          
          ## ðŸ“– Usage
          ```bash
          # Download and run
          chmod +x mcp-tools-server-linux-amd64
          ./mcp-tools-server-linux-amd64 --version
          
          # Run both MCP and HTTP servers (default)
          ./mcp-tools-server-linux-amd64
          
          # Run only HTTP server
          ./mcp-tools-server-linux-amd64 --http
          
          # Run only MCP server
          ./mcp-tools-server-linux-amd64 --mcp
          ```
          
          ## ðŸ”§ Build Info
          - **Version:** ${{ steps.version.outputs.VERSION }}
          - **Build Time:** ${{ steps.build_info.outputs.BUILD_TIME }}
          - **Git Commit:** ${{ steps.build_info.outputs.GIT_COMMIT }}
        draft: false
        prerelease: false
        
    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./mcp-tools-server-linux-amd64
        asset_name: mcp-tools-server-linux-amd64
        asset_content_type: application/octet-stream
        
    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./mcp-tools-server-linux-amd64.sha256
        asset_name: mcp-tools-server-linux-amd64.sha256
        asset_content_type: text/plain
